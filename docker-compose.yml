version: '3.8'
services:
  # nginx
  nginx:
    container_name: nginx
    restart: always
    build:
      context: ./backend/nginx
      dockerfile: Dockerfile
    depends_on:
      - frontend
      - user-service
      - question-service
      - matching-service
      - collaboration-service
      - history-service
    ports:
      - 80:80
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    container_name: postgres
    image: postgres:15
    restart: always # postgres up and running no matter what happens
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: cs3219_g47
    ports:
      - '5432:5432'
    networks:
      - app-network
    volumes: # bind data inside server to outside container
      - ./postgres_data:/var/lib/postgresql/data
      - ./backend/user-service/init-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql

  # MongoDB Database
  mongodb:
    container_name: mongodb
    restart: always
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: 1234
    ports:
      - '27017:27017'
    volumes:
      - ./mongo-data:/data/db
    networks:
      - app-network

  # User Service
  user-service:
    container_name: user-service
    restart: always
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    ports:
      - '8081:8081'
    networks:
      - app-network
    depends_on:
      - postgres

  # Question Service
  question-service:
    container_name: question-service
    restart: always
    build:
      context: ./backend/question-service
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: 1234
      ME_CONFIG_MONGODB_URL: mongodb://mongo:1234@mongodb:27017
    networks:
      - app-network
    depends_on:
      - mongodb

  # Matching Service
  matching-service:
    container_name: matching-service
    restart: always
    build:
      context: ./backend/matching-service
      dockerfile: Dockerfile
    ports:
      - '8083:8083'
    depends_on:
      - collaboration-service
    networks:
      - app-network

  # Collaboration Service
  collaboration-service:
    container_name: collaboration-service
    restart: always
    build:
      context: ./backend/collaboration-service
      dockerfile: Dockerfile
    ports:
      - '8084:8084'
    networks:
      - app-network

  # History Service
  history-service:
    container_name: history-service
    restart: always
    build:
      context: ./backend/history-service
      dockerfile: Dockerfile
    ports:
      - '8085:8085'
    networks:
      - app-network
    depends_on:
      - postgres

  # Frontend React App
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    stdin_open: true
    tty: true
    volumes:
      - ./frontend:/app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

